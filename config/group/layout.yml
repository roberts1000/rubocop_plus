# Layout/ArgumentAlignment checks alignment of arguments in multi-line method calls. rubocop defaults to `with_first_parameter`
# which expects:
#
#     method_call(a,
#                 b)
#
# rubocop_plus prefers the indented style
#
#     method_call(a,
#       b)
Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation # with_first_parameter is the default

# Layout/LineContinuationLeadingSpace
# From the RuboCop docs (https://docs.rubocop.org/rubocop/cops_layout.html#layoutlinecontinuationleadingspace):
#   Checks that strings broken over multiple lines (by a backslash) contain trailing spaces
#   instead of leading spaces (default) or leading spaces instead of trailing spaces."
# Disable the cop since there are many situations where it's useful to maintain the leading spaces.
Layout/LineContinuationLeadingSpace:
  Enabled: false

# Layout/AlignParameters checks alignment of parameters in multi-line method calls. rubocop defaults to `with_first_parameter`
# which expects:
#
#     method_call(a,
#                 b)
#
# rubocop_plus prefers the indented style
#
#     method_call(a,
#       b)
Layout/ParameterAlignment:
  EnforcedStyle: with_fixed_indentation # with_first_parameter is the default

# This cop checks the indentation of the right hand side operand in operations that span more than one line.
# Rubocop defaults to 'aligned'.
#
#   if first_method +
#      second_method +
#      third_method
#   end
#
# Prefer the 'indented' style.
#
#   if first_method +
#        second_method +
#        third_method
#   end
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented # aligned is the default
  IndentationWidth: 3 # the default seems to be 2 which makes methods indent 1 space past the first method

# Layout/MultilineMethodCallIndentation checks the indentation of chained method calls. rubocop defaults to 'aligned':
#
#   SomeReallyExceptionallyLongClassName.some_exceptionally_long_method_number_1(plus_variable_one, variable_two_...)
#                                       .some_exceptionally_long_method_number_2(plus_variable_one, variable_two_...)
#
# This can easily cause line length length violations (particularly with ActiveRecord queries), plus it wastes alot of white
# space at the beginning. The 'indented' style is preferred since it is more compact (although it uses an extra line).
#
#   SomeReallyExceptionallyLongClassName
#     .some_exceptionally_long_method_number_1(plus_variable_one, variable_two_...)
#     .some_exceptionally_long_method_number_2(plus_variable_one, variable_two_...)
#
# This has the added benefit of oriented the method calls directly under the object which is receiving the message, which
# is more readable.
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

# This cop checks for spaces around the '=' sign in a method's attribute list. Prefer no spaces since it more compact.
#
#   = Recommended =                 = Default =
#   def the_method(foo=1)     vs    def the_method(foo = 1)
Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

# Metrics/LineLength checks the length of lines. The 80 character default to too restrictive. It does have the advantage of
# saving horizontal screen space, which is useful for some layouts/workflows. However, it has some issues:
#   1. It doesn't take advantage of available horizontal screen width, which is widely available due to the proliferation
#      wide screen monitors.
#   2. It adds more lines to a class, which makes it more likely that rubocop's ClassLength cop will be exceeded.
#   3. Ruby code only represents part of a web application.  It is acceptable for HTML in the view to frequently exceed 80
#      characters and it is typically uses word-wrap which doesn't use ANY width limits. View code represents a large portion
#      of an application; if it is going to regularly exceed 80, why restrict the Ruby code to 80?
#   4. Many other projects, like Rails, exceed 80 so it doesn't appear to be a hard standard (at least not anymore).
# As a result, a larger line length was adopted to strike a better balance between, readability, scrolling frequency and
# layout concerns.
Layout/LineLength:
  Max: 130 # default is 80.

# See https://github.com/roberts1000/rubocop_plus/issues/250
Layout/LineEndStringConcatenationIndentation:
  Enabled: false
