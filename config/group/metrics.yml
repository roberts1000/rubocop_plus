# This cop checks that the ABC size of methods is not higher than the configured maximum. The current default is a little
# low and produces many false positives.
Metrics/AbcSize:
  Max: 40 # The default is 15.

# Metrics/BlockLength checks the lines in a block. The default is 25.
Metrics/BlockLength:
  Exclude:
    - spec/**/* # The RSpec DSL uses large blocks.
    - db/migrate/**/* # The Rails migrate folder has large blocks.
    - config/routes.rb # The Rails routes file is one large block.

# Metrics/ClassLength checks the number of lines in a class.
Metrics/ClassLength:
  Max: 200 # 100 is the default which is too restrictive.

# Metrics/LineLength checks the length of lines. The 80 character default to too restrictive. It does have the advantage of
# saving horizontal screen space, which is useful for some layouts/workflows. However, it has some issues:
#   1. It doesn't take advantage of available horizontal screen width, which is widely available due to the proliferation
#      wide screen monitors.
#   2. It adds more lines to a class, which makes it more likely that rubocop's ClassLength cop will be exceeded.
#   3. Ruby code only represents part of a web application.  It is acceptable for HTML in the view to frequently exceed 80
#      characters and it is typically uses word-wrap which doesn't use ANY width limits. View code represents a large portion
#      of an application; if it is going to regularly exceed 80, why restrict the Ruby code to 80?
#   4. Many other projects, like Rails, exceed 80 so it doesn't appear to be a hard standard (at least not anymore).
# As a result, a larger line length was adopted to strike a better balance between, readability, scrolling frequency and
# layout concerns.
Metrics/LineLength:
  Max: 130 # default is 80.

# Metrics/MethodLength checks the number of lines in a method.
Metrics/MethodLength:
  Max: 15
  Exclude:  # skip all of the following....
    - db/migrate/**/*

# Metrics/ModuleLength checks the number of lines in a module.
Metrics/ModuleLength:
  Max: 200 # 100 is the default which is too restrictive.

# Metrics/ParameterLists validates the number of parameters that a method can take.
Metrics/ParameterLists:
  Max: 7 # The default limit is 5 which is a bit restrictive.
