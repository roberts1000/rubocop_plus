#!/usr/bin/env ruby

# This script runs rubocop with some default output specifications.  Output is written to a 'rubocop/' folder into the root
# of an application.  This script can be invoked by running the following commands in the root of a ruby gem, rails engine
# or rails application:
#
# EXECUTION
#
# rubo      # Run rubocop with the defaults.
# rubo -h   # View the help file to see more options.
#
# EXIT STATUS
#
# See the bottom of the file for exit status codes and their meaning.

lib = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require "cri"
require 'commands/rubo'
require "commands/rubo/utils/cri_platform_monkey_patch"

# rubocop:disable Metrics/BlockLength
command = Cri::Command.define do
  # name        'rubo'
  usage       'rubo [options]'
  # aliases     :ds, :stuff
  # summary     'foo'
  description 'rubo is an executable installed by the rubocop_plus gem.  It invokes rubocop with a custom set of ' \
    "rules.  The following status codes are returned:\n\n" \
    "STATUS CODES\n\n" \
    "0 - rubocop ran and results were written to the 'rubocop' folder........\n" \
    "1 - the project root does not contain a .rubocop.yml file...............\n" \
    "2 - the .rubocop.yml file does not have the correct content.............\n" \
    "3 - the 'rubocop' command cound not be found (likely due to missing gem)\n" \
    "4 - the output from the 'rubo' command is missing or corrupt............\n"

  flag :h, :help, 'show help for this command' do |_value, cmd|
    puts cmd.help
    exit 0
  end

  flag :i, :init, "(re)initialize your project with starting files; this will overwrite existing files" do |_value, cmd|
    RubocopPlus::Commands::Rubo.new({ validate: true }, {}, cmd).initialize_project
    exit 0
  end

  # This option is helpful when we're printing results to places that don't support the terminal colors (like the Jenkins
  # console output).  It also helps other tools parse the results of a successful run since the output doesn't contain extra
  # numeric characters.
  flag nil, "no-color", "do not colorize the output"

  # This method should return a proper exit status if there are errors determining the rubocop version.
  flag nil, "rubocop-version", 'return the version of rubocop' do |_value, cmd|
    rubo = RubocopPlus::Commands::Rubo.new({ validate: true }, {}, cmd)
    rubo.check_if_rubocop_command_exists!
    puts rubo.rubocop_version_name
    exit 0
  end

  # This method should return a proper exit status if there are errors determining the total violations count.
  flag :t, "total-violations", 'write the total violations' do |_value, cmd|
    rubo = RubocopPlus::Commands::Rubo.new({ total_violations: true }, {}, cmd)
    rubo.check_if_total_violations_count_still_present_and_valid!
    puts rubo.total_violations_count
    exit 0
  end

  # This method should return a proper exit status if there are validation errors.
  flag nil, :validate, "make sure rubocop is runnable" do |_value, cmd|
    RubocopPlus::Commands::Rubo.new({ validate: true }, {}, cmd).validate_pre_run!
    puts "Everything looks great!"
    exit 0
  end

  flag :v, :version, 'return the version of rubo' do |_value, _cmd|
    require 'rubocop_plus/version'
    puts RubocopPlus::VERSION
    exit 0
  end

  run do |options, args, cmd|
    RubocopPlus::Commands::Rubo.new(options, args, cmd).run
  end
end
# rubocop:enable Metrics/BlockLength

begin
  command.run(ARGV)
  exit 0
# Raised when an application fails to include a .rubocop.yml file.
rescue RubocopPlus::Commands::MissingYml => e
  warn e.message
  exit 1
# Raised when a project has a .rubocop.yml file, but it doesn't contain the correct content to work with this gem.
rescue RubocopPlus::Commands::IncorrectYml => e
  warn e.message
  exit 2
# Raised when the needed version of the rubocop executable is not installed (like because the rubocop gem is not installed).
rescue RubocopPlus::Commands::NoRubocopCommand => e
  warn e.message
  exit 3
# Raised when there are issues with the output generated by rubo.
rescue RubocopPlus::Commands::BadOutput, RubocopPlus::Commands::OutputMissing => e
  warn e.message
  exit 4
end
